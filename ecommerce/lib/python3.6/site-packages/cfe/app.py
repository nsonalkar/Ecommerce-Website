import argparse
import sys
from subprocess import call
import os
import time
import shutil
from cfe.cli.utils.styling import progress
from cfe.cli.utils.main import initialize_project
from cfe.cli.utils.upgrade import UpgradeVenvPackage
import getpass

def cfe_cli(args=None):
    

    parser = argparse.ArgumentParser(prog='CFE CLI', add_help=True, description='Start a CFE project')
    parser.add_argument('-f', '--force', help='Force CFE CLI to run on unsupported systems.', action='store_true')
    group1 = parser.add_argument_group('projects', 'Create or replace projects with the ones we built.')
    
    group1.add_argument('-n', '--new', help='Create a new project in "backend/".', action='store_true')
    group1.add_argument('-r', '--replace', help='Replace current project in the "backend/" directory (if any)', action='store_true')
    group1.add_argument('-p', '--project',
            nargs='?',
            const='blank', 
            type=str, 
            #choices=['ecommerce3', 'mvp_landing', 'srvup', 'blank'], 
            choices=['blank'], 
            default='blank',
            help='Select the project you want to start with. Choices are above between [{...}]. More coming soon.'
            )
    group2 = parser.add_argument_group('pip', 'PIP related upgrades and commands.')
    group2.add_argument('-u', '--upgrade', help='Upgrade your virtualenv\'s outdated python packages".', action='store_true')
    group2.add_argument('-na', '--no-archive', help='Leaves out the archive".', action='store_true')
    group2.add_argument('-ir', '--ignore-requirements', help='Leaves out the archive".', action='store_true')
        

    try:
        call(['git', '--version'])
    except:
        parser.error("Please install git before continuing. Install it here: https://git-scm.com/downloads")

    data = vars(parser.parse_args(args))
    force_ = data.get("force")
    system_not_supported_msg = """***************\n\nSorry, the CFE CLI doesn't support your system just yet. 
It *may* still work but we can't guarentee it. 
Please let us know you want the CFE CLI on twitter 
with your system name: @teamcfe\n\n\n""" #Use the (-f) or (--force) flag to try it out still."""

    if os.name == 'nt':
        if not force_:
            print(system_not_supported_msg)
            #parser.error(system_not_supported_msg)
        else:
            print("\n\n^^^^^^^ CFE CLI FORCED ^^^^^^^\n\n")
    elif os.name == 'java':
        if not force_:
            print(system_not_supported_msg)
            #parser.error(system_not_supported_msg)
        else:
            print("\n\n^^^^^^^ CFE CLI FORCED ^^^^^^^\n\n")
    elif os.name == 'posix':
        pass

    new_ = data.get('new')
    replace_ = data.get('replace')
    project_ = data.get('project')
    
    cwd = os.getcwd()
    src_path = os.path.join(cwd, 'backend')
    check_path = os.path.exists(src_path)
    


    if new_: #ignore replace
        if check_path:
            parser.error(message="A project already exists. Please use the replace flag (-r, --replace) or get help (-h).")
        else:
            initialize_project(src_path, project_, creating=True)
    elif not new_ and replace_:
        if not check_path:
            initialize_project(src_path, project_, creating=True)
        else:
            print("\n*********\nAre you sure you want to replace your current project?\nLocated here:\n\n" + src_path + "\n\n*********\n\nThis CANNOT be undone.You will lose all SAVED files.\n\n(y/yes) Yes I'm sure.\n(n) Any other key to cancel.\n\n(Type your selection then press enter)")
            answer_ = input()
            if answer_.lower()  == 'y' or answer_.lower() == 'yes':
                initialize_project(src_path, project_, creating=False)
    else:
        pass
    
    upgrade = data.get("upgrade")
    make_archive = True
    no_archive = data.get("no_archive", False)
    if no_archive:
        make_archive = False
    incl_requirements = True
    ignore_requirements = data.get("ignore_requirements", False)
    if ignore_requirements:
        incl_requirements = False
    if upgrade:
        UpgradeVenvPackage(make_archive=make_archive, incl_requirements=incl_requirements)


if __name__ == "__main__":
    cfe_cli()