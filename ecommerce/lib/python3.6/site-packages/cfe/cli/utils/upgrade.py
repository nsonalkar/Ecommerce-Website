import datetime
import os
from subprocess import call
import pip, pkg_resources, imp


class UpgradeVenvPackage(object):
    '''
    A class to upgrade virtualenv pacakges.
    '''
    outdated_packages = []
    packages_upgraded = []

    def __init__(self, make_archive=True, incl_requirements=True):
        super(UpgradeVenvPackage, self).__init__()
        if make_archive:
            self.make_archive()
        self.upgrade_outdated(all_pkgs=False)
        if incl_requirements:
            self.save_requirements()

    def get_outdated(self):
        list_command = pip.commands.list.ListCommand()
        options, args = list_command.parse_args([])
        packages = pip.utils.get_installed_distributions()
        self.outdated_packages = list_command.get_outdated(packages, options)
        return self.outdated_packages

    def upgrade_outdated(self, all_pkgs=False):
        if all_pkgs:
            to_upgrade = self.get_packages(upgrade=True)
        else:
            to_upgrade = self.get_outdated()
        for dist in to_upgrade:
            call("pip install --upgrade {pack_name}".format(pack_name=dist.project_name), shell=True)
            self.packages_upgraded.append(dist.project_name)
        if len(self.packages_upgraded) > 0:
            print("Upgraded the folllowing pacakges:\n")
            for pkg in self.packages_upgraded:
                print(" - " + str(pkg))
            print("\n")
        else:
            print("Nothing to upgrade.")


    def set_archive_filepath(self, requirements_path, filepath=None, item=0):
        today = str(datetime.date.today())
        if filepath is None:
            base_filepath = os.path.join(requirements_path, "archive__%s.txt"%(today))
        else:
            if item >= 0:
                item += 1
            base_filepath = os.path.join(requirements_path, "archive__%s__%i.txt" %(today, item))
        if os.path.exists(base_filepath):
            return self.set_archive_filepath(requirements_path, filepath=base_filepath, item=item)
        return base_filepath



    def save_archive(self, archive_list):
        requirements_path = os.path.join(os.getcwd(), "requirements")
        if not os.path.exists(requirements_path):
            os.mkdir(requirements_path)
        #filepath = os.path.join(requirements_path, "requirements-archive.txt")
        filepath = self.set_archive_filepath(requirements_path)
        with open(filepath, "w+") as archive:
            for rq in sorted(archive_list, key=str.lower):
                archive.write(str(rq) + "\n")
        print("Archive done")

    def make_archive(self):
        print("Making archive...")
        current = self.get_packages()
        self.save_archive(current)


    def get_packages(self, upgrade=False):
        print("Getting packages...")
        current = []
        for dist in pip.get_installed_distributions():
            if upgrade:
                current.append(dist)
            else:
                current.append(str(dist.as_requirement()))
        return current

    def get_requirements_location(self, next_to=None):
        if next_to is not None:
            location = None
            for root, dirs, files in os.walk(os.getcwd()):
                for file in files:
                    if str(file) == str(next_to):
                        location = os.path.join(root, "requirements.txt")
                        return location
        return None


    def save_requirements(self, next_to='manage.py'):
        #packages  = self.get_packages()
        print("Saving requirements.txt")
        location = self.get_requirements_location(next_to=next_to)
        if location is None:
            location = os.path.join(os.getcwd(), "requirements.txt")
        with open(location, "w") as f:
            imp.reload(pkg_resources)
            packages = [str(dist.as_requirement()) for dist in pip.utils.get_installed_distributions()]
            pip_list = ["%s==%s"%(i.key, i.version) for i in pkg_resources.working_set]
            for pkg in sorted(pip_list, key=str.lower):
                f.write(str(pkg) + "\n")




